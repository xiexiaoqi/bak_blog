
git fatal: Unable to find remote helper for 'https'

安装支持
yum install curl-devel expat-devel gettext-devel \
    openssl-devel zlib-devel

wget https://git-core.googlecode.com/files/git-1.8.4.1.tar.gz

$ tar -zxf git-1.7.2.2.tar.gz
    $ cd git-1.7.2.2
./configure --with-curl=/usr/local
    $ make
    $ sudo make install

git 配置用户信息

   git config --global user.name 'xxx'
   git config --global user.email xx@xx.com
   //默认编辑器
   git config --global core.editor emacs
   //差异分析工具
   git config --global merge.tool vimdiff

   设定保存在.git/config
   
   查看配置信息
   git config --list
   
   如果有看到多个相同的值，则说明他们来自不同的配置文件如(/etc/gitconfig or !/.gitconfig)
   不过git采用的是最后一个
   
   直接查看特定的名字
   git config user.name
   
2.1 取得项目的 Git 仓库
   两种方式：一：通过导入文件创建新的git仓库；二：从已有的git仓库
   克隆出一个亲的仓库
   
    开始：（在已经有版本的库中进行操作）
        使用clone命令进行克隆
            git clone git://github.com...
			
			在这里可以进行设置，如果克隆到特定的目录 git clone git://xxx mydir
			
		文件生命周期:
		未来跟踪         未修改            已修改          已上传
		untracked   ->   unmodified   ->   modified   ->   staged
		
		具体操作
		git clone git://github.com/schacon/grit.git mygrit
		cd mygrit
		查看文件状态:
		git status
		    操作步骤:
			    git init  //初始化
			    touch README
				git status
				//显示Untracked files(未跟踪文件 README)
				//使用git add添加
				
				这时候可以使用git add添加
				git add README
				git status
				//这时显示，文件已经是暂存状态（已经放入暂存区）
				//Changes to be committed,如果此时提交，那么该文件将被留在历史版本中
                //use git reset file 撤出暂存区
                
                修改一个已经存在于版本中的文件
				vi benchmarks.rb
				...
				git status
				//显示changes not staged for commit.说明已经跟踪的文件被修改了
				//可以使用git add 将文件放入暂存区
				git add benchmarks.rb
				
			文件忽略
			编辑文件.gitinore
			    编辑规则，#注释，可以直接写文件名，也可通过正则匹配
				*.[oa] //忽略以.o/.a结尾的文件
				!file  //不忽略这个文件
				/TODO  //忽略项目根目录下的TODO文件
				build/ //忽略build目录下的所有文件
				doc/*.t//忽略doc目录下的*.txt文件，不忽略子目录
				
			查看暂存和未暂存的更新
			    “git status”  查看的是修改过的文件，但如果要查看修改过哪些地文件呢，
				可以使用“git diff” 命令查看，不带参数查看的是当前文件和暂存区域文件的差异
				如果暂存区域文件和上版本文件的差异，可以使用“git diff --cached  or git diff --staged”
				
			提交更新
				git commit
				可加参数 -m "说明文字" 对此版本进行说明
				执行完命令后，全显示出执行结果，
				root@localhost mygrit]# git commit -m 'test commit'
				[master 310e1f2] test commit
				 2 files changed, 1 insertion(+)
				 create mode 100644 README
				提交到的分支(master)
				本次提交的hash(310e1f2)
				多少文件被修改,多少行被添加/删除
				
				执行此命令，提交的快照只是被添加到暂存区域的文件，而只修改未被 git add 的文件会被忽略
				
				如果不想每次提交前都要执行git add，那么可以执行git commit -a跳过此步骤。
			
			删除文件
			    git rm
				不带任何参数执行，则不仅会把文件从仓库删除，还会将它从本地删除。
				
				如果一个文件已经被add过到暂存区域了，当执行git rm时，将会报error,如果要强制删除，需加上参数 -f
				
				如果只想将从仓库中删除（暂存区域也一样）而本地还是保留。加上参数 --cached
				
				tips: 删除文件，有递归删除，和只删当前目录，需递归删除，在最后加上“~”即可
				
			移动文件
			    git mv
				
				git mv file_from file_to
				
			查看日志
			    git log
				
					选项 说明
					-p 按补丁格式显示每个更新之间的差异。
					--stat 显示每次更新的文件修改统计信息。
					--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
					--name-only 仅在提交信息后显示已修改的文件清单。
					--name-status 显示新增、修改、删除的文件清单。
					--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
					--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
					--graph 显示 ASCII 图形表示的分支合并历史。
					--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
                具体查看“http://git.oschina.net/progit/2-Git-基础.html”			
				
           	修改最后一次提交
                如果在执行git commit后，发现有文件漏传，则可以使用 git commit --amend命令修改最后一次提交内容

                git commit -m 'first commit'
                //发现少了一个文件
                git add other.file
                git commit --amend
				
            取消已经暂存的文件
			    git reset file
			
			取消对文件的修改
			    git checkout file
   
   
   
   
   
   
   
   
   

   
